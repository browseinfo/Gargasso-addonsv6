# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from osv import osv, fields
from tools.translate import _
import netsvc

class stock_delivery_createlines(osv.osv):
    _name = "stock.delivery.createlines"

    _columns = {
        'sale_order' : fields.char('Sale Order Number', size=32),
        'sale_all_order' : fields.char('All Sale Order Number', size=32),
#        'sale_id': fields.many2one('sale.order', 'sale', required=True),
        'delivery_ids' : fields.many2many('stock.move', 'move_delivery_rel', 'move_id', 'mrp_id', 'Products to Deliver'),
        'partner_id' : fields.many2one('res.partner', 'Customer'),

    }

    _defaults = {

    }
    
    def crate_lines(self, cr, uid, ids, context=None):
        mrp_obj = self.pool.get('mrp.production')
        move_obj = self.pool.get('stock.move')
        sale_obj = self.pool.get('sale.order')
#        lot_obj = self.pool.get('stock.production.lot')
        sale_order_wiz = self.browse(cr, uid, ids, context=context)[0]
        sale_order = sale_order_wiz.sale_order
        sale_all_order = sale_order_wiz.sale_all_order

        delivery_ids = sale_order_wiz.delivery_ids
        mrp_ids = mrp_obj.search(cr, uid, [('origin', 'ilike', sale_order), ('state','in', ('in_production', 'done'))])
        picking_obj = self.pool.get('stock.picking')
        list_move = []
        
        picking_ids = picking_obj.search(cr, uid, [('origin', 'ilike', sale_order), ('type', '=', 'out'), ('state', '!=', 'done')])
        old_id = []

        if picking_ids:
            raise osv.except_osv(_('Warning !'),_('Delivery Order is already created.'))
            return True
        
        if mrp_ids:
            for mrp_id in mrp_ids:
                mrp_move_ids = mrp_obj.browse(cr, uid, mrp_id, context=context).move_created_ids2
                if mrp_move_ids:
                    for mrp_move_id in mrp_move_ids:
                        ids_mov = [mrp_move_id.id]
                        for move in move_obj.browse(cr, uid, ids_mov, context=context):
                            if move.state == 'done':
                                copy_move_id = move_obj.copy(cr, uid, move.id,context=context)
                                move_browse_obj = move_obj.browse(cr, uid, copy_move_id, context)
                                if move_browse_obj.prodlot_id:
                                    move_obj.write(cr, uid, [ copy_move_id], {'state': 'draft','production_id':[], 'product_qty': move_browse_obj.prodlot_id.stock_available},context=context)
                                    list_move.append(copy_move_id)
                                else:
                                    raise osv.except_osv(_('Warning !'),_('There is no production lot or quantity for this Order.'))
                else:
                    raise osv.except_osv(_('Warning !'),_('There is no finished products on this manufacturing order1.'))
                        
            if delivery_ids:
                for i in delivery_ids:
                    old_id.append(i.id)
                for old_i in old_id:
                    copy_move_id = move_obj.copy(cr, uid, old_i,context=context)
                    move_obj.write(cr, uid, [copy_move_id], {'state': 'draft' ,'production_id':[]},context=context)
                    list_move.append(copy_move_id)
            else:
                self.write(cr, uid, ids, {'delivery_ids': [(6, 0, list_move)], 'sale_order': ''},context=context)
            if sale_all_order and sale_order:
                new_order = sale_all_order + ',' + sale_order
                self.write(cr, uid, ids, {'sale_all_order': new_order },context=context)
            else:
                self.write(cr, uid, ids, {'sale_all_order': sale_order},context=context)
        else:
            raise osv.except_osv(_('Warning !'),_('There is no finished products on this manufacturing order2.'))
        return True

    def crate_do_lines(self, cr, uid, ids, context=None):
        picking_obj = self.pool.get('stock.picking')
        move_obj = self.pool.get('stock.move')
        mod_obj = self.pool.get('ir.model.data')
        do_ids = self.browse(cr, uid, ids, context=context)[0].delivery_ids
        ref = self.browse(cr, uid, ids,context=context)[0].sale_all_order
        dest_loc_id = self.browse(cr, uid, ids,context=context)[0].partner_id.property_stock_customer

        input_location = mod_obj.get_object_reference(cr, uid, 'stock', 'stock_location_stock')
        output_location = mod_obj.get_object_reference(cr, uid, 'stock', 'stock_location_customers')
         
        if not do_ids:
            raise osv.except_osv(_('Warning !'),_('There is no move line for create delivery Order.'))
            return True
        else:
            pick_data = {
            'type': 'out',
            'state': 'draft',
            'origin' : ref,
            }
            picking_id = picking_obj.create(cr, uid, pick_data)
            for do_id in do_ids:  
                for move in move_obj.browse(cr, uid, [do_id.id], context=context):
                    move_line = {
                            'name': move.name,
                            'picking_id': picking_id,
                            'product_id': move.product_id.id,
                            'date': move.date,
                            'date_expected': move.date_expected,
                            'product_qty': move.product_qty,
                            'product_uom': move.product_uom.id,
                            'product_uos_qty': (move.product_uos and move.product_uos_qty) or move.product_qty,
                            'product_uos': (move.product_uos and move.product_uos.id)\
                                or move.product_uom.id,
                            'product_packaging': move.product_packaging.id,
                            'location_id': move.location_dest_id and move.location_dest_id.id,
                            'location_dest_id': dest_loc_id.id,
                            'tracking_id': False,
                            'state': 'draft',
                            'note': move.note,
                            'company_id': move.company_id.id,
                            'prodlot_id': move.prodlot_id and move.prodlot_id.id or False
                            }
                    move_id = move_obj.create(cr, uid, move_line)
        return {
                'name': _('Delivery Order'),
                'view_type': 'form',
                'view_mode': 'tree,form',
                'res_model': 'stock.picking',
                'view_id': False,
                'type': 'ir.actions.act_window',
                'context': {'type' : 'out', 'active_id': picking_id}
            }

stock_delivery_createlines()

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
