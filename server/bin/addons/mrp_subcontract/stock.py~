# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from dateutil.relativedelta import relativedelta
import time

from osv.orm import browse_record, browse_null
from osv import fields, osv
from tools.translate import _
import netsvc

class stock_picking(osv.osv):
    _inherit = 'stock.picking'
    _name = 'stock.picking'
    _columns = {
        'active': fields.boolean('Active', help="If your product is subcontracting then please checked it, It will provide you to create a invoice"),
    }
    
    _defaults = {
        'active': True,
	}

    def do_merge(self, cr, uid, ids, context=None):
        """
        To merge similar type of delivery orders.
         @param self: The object pointer.
         @param cr: A database cursor
         @param uid: ID of the user currently logged in
         @param ids: the ID or list of IDs
         @param context: A standard dictionary

         @return: new delivery order id

        """

        wf_service = netsvc.LocalService("workflow")
        def make_key(br, fields):
            list_key = []
            for field in fields:
                field_val = getattr(br, field)
                if field in ('product_id'):
                    if not field_val:
                        field_val = False
                if isinstance(field_val, browse_record):
                    field_val = field_val.id
                elif isinstance(field_val, browse_null):
                    field_val = False
                elif isinstance(field_val, list):
                    field_val = ((6, 0, tuple([v.id for v in field_val])),)
                list_key.append((field, field_val))
            list_key.sort()
            return tuple(list_key)

    # compute what the new orders should contain

        new_orders = {}

        for pick in [order for order in self.browse(cr, uid, ids, context=context) if order.state not in ('done', 'cancel')]:
            order_key = make_key(pick, ('partner_id', 'address_id', 'invoice_state'))
            new_order = new_orders.setdefault(order_key, ({}, []))
            new_order[1].append(pick.id)
            order_infos = new_order[0]
            if not order_infos:
                name = self.pool.get('ir.sequence').get(cr, uid, 'stock.picking')
                order_infos.update({
                        'origin': pick.origin,
                        'name': name,
                        'date': pick.date,
                        'address_id' : pick.address_id.id,
                        'partner_id': pick.partner_id.id,
                        'invoice_state':  pick.invoice_state,
                        'type': 'out',
                        'company_id': pick.company_id.id,
                        'move_lines' : {},
                        'note': '%s' % (pick.note or ''),
                })
            else:
                if pick.date < order_infos['date']:
                    order_infos['date'] = pick.date
                if pick.note:
                    order_infos['note'] = (order_infos['note'] or '') + ('\n%s' % (pick.note,))
                if pick.origin:
                    order_infos['origin'] = (order_infos['origin'] or '') + ' ' + pick.origin
            
            for move_line in pick.move_lines:
                line_key = make_key(move_line, ('name','product_id', 'location_id', 'location_dest_id', 'state'))
                o_line = order_infos['move_lines'].setdefault(line_key, {})
                if o_line:
                    # merge the line with an existing line
                    o_line['product_qty'] += move_line.product_qty * move_line.product_uom.factor / o_line['uom_factor']
                else:
                    # append a new "standalone" line
                    for field in ('product_qty', 'product_uom'):
                        field_val = getattr(move_line, field)
                        if isinstance(field_val, browse_record):
                            field_val = field_val.id
                        o_line[field] = field_val
                    o_line['uom_factor'] = move_line.product_uom and move_line.product_uom.factor or 1.0

        allorders = []
        orders_info = {}
        for order_key, (order_data, old_ids) in new_orders.iteritems():
            #skip merges with only one order
            if len(old_ids) < 2:
                allorders += (old_ids or [])
                continue

            # cleanup order line data
            for key, value in order_data['move_lines'].iteritems():
                del value['uom_factor']
                value.update(dict(key))
            order_data['move_lines'] = [(0, 0, value) for value in order_data['move_lines'].itervalues()]
            # create the new order
            neworder_id = self.create(cr, uid, order_data)
            orders_info.update({neworder_id: old_ids})
            allorders.append(neworder_id)
            # make triggers pointing to the old orders point to the new order
            for old_id in old_ids:
                wf_service.trg_redirect(uid, 'stock.picking.', old_id, neworder_id, cr)
                wf_service.trg_validate(uid, 'stock.picking', old_id, 'button_cancel', cr)
        return orders_info

stock_picking()
# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:

